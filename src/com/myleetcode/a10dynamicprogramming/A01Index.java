package com.myleetcode.a10dynamicprogramming;

/**
 * @author eniac555
 * @date 2023/6/18
 * @description:
 */
public class A01Index {

    /*

    01：斐波那契数列
    02：爬楼梯
    03：使用最小花费爬楼梯
    04：不同路径
    05：不同路径 II
    06：整数拆分
    07：不同的二叉搜索树
    08：二维数组01背包
    09：一维dp数组（滚动数组）--01背包
    10：分割等和子集
    11：最后一块石头的重量II
    12：目标和
    13：1和0的组合
    14：完全背包理论基础
    15：零钱兑换II-- 给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。
    16：组合总数--找排列
    17：爬楼梯--进阶版
    18：零钱兑换--给定不同面额硬币 coins 和总金额 amount。计算凑成总金额的最少硬币数。如果没有，返回 -1。硬币有无限个.
    19：完全平方数--给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n----最少整数
    20：单词拆分
    21：多重背包
    22：打家劫舍---第一版
    23：打家劫舍---第二版
    24：打家劫舍---第三版
    25：买股票的最佳时机----买卖一次
    26：买股票的最佳时机----买卖多次
    27：买股票的最佳时机----最多 买卖两次
    28：买股票的最佳时机----最多 买卖K次
    29：买股票的最佳时机----含冷冻期，可多次交易
    30：买股票的最佳时机----含手续费，可多次交易

     */
}
